try (test = grangertest (F[,targetIndex] ~ F[,j], order = lag))
try (test1 =   grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
#causalities[p,3] = j
p = p+1
}
}
targetIndex
j
test = grangertest (F[,targetIndex] ~ F[,j], order = lag)
test
test1 =   grangertest (F[,j] ~ F[,targetIndex], order = lag)
test1
test1$`Pr(>F)`[2]
test$`Pr(>F)`[2]
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
# tryCatch({
try (test = grangertest (F[,targetIndex] ~ F[,j], order = lag))
try (test1 =   grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
# }, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
#causalities[p,3] = j
p = p+1
}
}
j=1
lag = lag_max
if (j != targetIndex) {
tryCatch({
try (test = grangertest (F[,targetIndex] ~ F[,j], order = lag))
try (test1 =   grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
#causalities[p,3] = j
p = p+1
}
test
try (test = grangertest (F[,targetIndex] ~ F[,j], order = lag))
test = grangertest (F[,targetIndex] ~ F[,j], order = lag)
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
#causalities[p,3] = j
p = p+1
}
}
causalities
naiveSelection <- function (F, targetIndex, threshold, lag_max)
{
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
#causalities[p,3] = j
p = p+1
}
}
# for (i in 1:ncol(causalities))
# {
#     if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
#     {
#       results[i] = causalities[i,3]
#     }
# }
#return (results)
return (causalities)
}
naiveSelection (data, target_index, 0.2, 20)
naiveSelection <- function (F, targetIndex, threshold, lag_max)
{
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
causalities[p,3] = j
p = p+1
}
}
for (i in 1:ncol(causalities))
{
if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
{
results[i] = causalities[i,3]
}
}
return (results)
#return (causalities)
}
causSelect = naiveSelection (data, target_index, 0.2, 20)
causSelect
causSelect = naiveSelection (data, target_index, 0.1, 20)
causSelect
causSelect = naiveSelection (data, target_index, 0.01, 20)
causSelect
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
causalities[p,3] = j
p = p+1
}
}
for (i in 1:nrow(causalities))
{
if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
{
results[i] = causalities[i,3]
}
}
causalities
naiveSelection <- function (F, targetIndex, threshold, lag_max)
{
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
causalities[p,3] = j
p = p+1
}
}
for (i in 1:nrow(causalities))
{
if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
{
results[i] = causalities[i,3]
}
}
return (results)
#return (causalities)
}
causSelect = naiveSelection (matrix, targetIndex, 0.9)
causSelect = naiveSelection (data, target_index, 0.95, 20)
causSelect
causSelect = naiveSelection (data, target_index, 0.9, 20)
causSelect
naiveSelection <- function (F, targetIndex, threshold, lag_max)
{
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
causalities[p,3] = j
p = p+1
}
}
p = 1
for (i in 1:nrow(causalities))
{
if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
{
results[p] = causalities[i,3]
p = p + 1
}
}
return (results)
#return (causalities)
}
causSelect
causSelect = naiveSelection (data, target_index, 0.9, 20)
causSelect
data_name
target_name
file_name_split = strsplit(data_dir, "/")
file_name_split
data_name = file_name_split[length(file_name_split)]
data_name
data_dir
file_name_split = strsplit(data_dir, "/")[[1]]
file_name_split
data_name = file_name_split[length(file_name_split)]
data_name
paste0(data_name,"_",target_name,"_","ufsm.csv")
output_dir
causSelect
colnames[causSelect]
target_names = c(dat[[3]])
target_names[1] = NULL
target_names
target_names[1] = NULL
library(tsDyn)
library(lmtest)
library(vars)
library(stats) ##hclus
naiveSelection <- function (F, targetIndex, threshold, lag_max)
{
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
causalities[p,3] = j
p = p+1
}
}
p = 1
for (i in 1:nrow(causalities))
{
if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
{
results[p] = causalities[i,3]
p = p + 1
}
}
return (results)
#return (causalities)
}
source('~/Documents/causality-features-selection/src/selection/ufsm.R', echo=TRUE)
library(tsDyn)
library(lmtest)
library(vars)
library(stats) ##hclus
#### SELECTKBEST based on causality
naiveSelection <- function (F, targetIndex, threshold, lag_max)
{
results = c()
naiveClasse = c()
p = 1
causalities = data.frame()
for (j in 1:ncol(F))
{
# var = VARselect(F,lag.max=lag_max)
#lag = var$selection[1]
lag = lag_max
if (j != targetIndex) {
tryCatch({
test = try (grangertest (F[,targetIndex] ~ F[,j], order = lag))
test1 = try (  grangertest (F[,j] ~ F[,targetIndex], order = lag))
if(test[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,1] = 0
} else {
# causality[p,1] = 1 - test$`Pr(>F)`[2]
causalities[p,1] = 1 - test$`Pr(>F)`[2]
}
if(test1[1] == "Error in vc[ovar, ovar] : indice hors limites\n")
{
causalities[p,2] = 0
} else {
#causality[p,2] = 1 - test1$`Pr(>F)`[2]
causalities[p,2] = 1 - test1$`Pr(>F)`[2]
}
}, error=function(e){cat("ERROR :",conditionMessage(e), "\n")})
causalities[p,3] = j
p = p+1
}
}
p = 1
for (i in 1:nrow(causalities))
{
if (causalities[i,1] >= threshold && causalities[i,2] < threshold)
{
results[p] = causalities[i,3]
p = p + 1
}
}
return (results)
#return (causalities)
}
data_dir = "../../data/ebob-l.csv"
###### Initialisations
command = paste0 ('awk /^#/ ',data_dir)
dat <- system(command,  intern = TRUE)
dat <- strsplit(dat, ";")
file_name_split = strsplit(data_dir, "/")[[1]]
data_name = file_name_split[length(file_name_split)]
dat[[3]] = gsub(" ", "", dat[[3]], fixed = TRUE)
dat[[3]] = gsub(" ", "", dat[[3]], fixed = TRUE)
target_names = c(dat[[3]])
target_names[1] = NULL
target_name = target_names[1]
target_name = gsub(" ", "", target_name, fixed = TRUE)
data = read.csv(data_dir, header = TRUE, dec = '.',sep=";", comment.char = "#")
colnames = colnames(data)
for(j in 1:length(colnames))
{
if (colnames[j] == target_name)
{
target_index = j
break;
}
}
selectKc = data.frame()
# Univariate feature selection method (machine learning paper)
causSelect = naiveSelection (data, target_index, 0.9, 20)
print (causSelect)
output_dir = paste0(output_dir,data_name,"_",target_name,"_","ufsm.csv")
selectKc = data [,causSelect]
selectKc = data.frame (data[,target_index], selectKc)
colnames(selectKc) = colnames[causSelect]
causSelect = naiveSelection (data, target_index, 0.9, 20)
target_index
target_name
dat[[3]]
dat[[3]] = gsub("\r", "", dat[[3]], fixed = TRUE)
dat[[3]]
target_names = c(dat[[3]])
target_names[1] = NULL
args = commandArgs(trailingOnly=TRUE)
if (length(args) > 2)
print ("Error: number of arguments incorrect.")
quit()
